<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create and Deploy Package</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>processId</name>
          <description>Process Id</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>packageVer</name>
          <description>Package Version</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>packageNotes</name>
          <description>Package Notes</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>componentType</name>
          <description>Type of Component</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>process</string>
              <string>api</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>xmlFolder</name>
          <description>Scan folder for Component definitions</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

export GITHUB_WORKSPACE=/opt/jenkins/boomi/
export WD=${GITHUB_WORKSPACE}/cli/scripts/
export WORKSPACE=$WD/tmp/
export GITHUB_REPO=&quot;https://github.com/p-hatz/boomi_CICD/blob/main/CodeReview/&quot;

export sonarRulesFile=&quot;$WD/conf/BoomiSonarRules.xml&quot;

export gitComponentRepoURL=&quot;https://github.com/p-hatz/boomi_CICD/&quot;
export gitComponentOption=&quot;CLONE&quot;

export AUTH=$AtomSphereUser:$AtomSphere
export componentId=$processId
export notes=$packageNotes
export componentType=$componentType
export extractComponentXmlFolder=$xmlFolder
export listenerStatus=&quot;PAUSED&quot;

export saveComponentId=$componentId
export saveComponentType=$componentType

export GH=$GH

source &quot;${WD}/initcrPackage.sh&quot; authToken=$AUTH componentId=$componentId packageVersion=$packageVer notes=&quot;$notes&quot; componentType=$componentType extractComponentXmlFolder=$extractComponentXmlFolder
_ret=$error
if [ &quot;$_ret&quot; -eq 0 ]
then
    envName=&quot;1.Dev&quot;
    echo Deploying...
	&quot;${WD}&quot;/initdeployPackage.sh authToken=$AUTH componentId=$saveComponentId packageVersion=$packageVer componentType=$saveComponentType notes=&quot;$notes&quot; env=$envName listenerStatus=$listenerStatus
	_ret=$?
	if [ &quot;$_ret&quot; -eq 0 ]
	then
		echo Sending Slack...
        _file=$GITHUB_REPO&quot;ViolationsReport_&quot;$saveComponentId&quot;.html&quot;
        _msg=&quot;Package &apos;$packageId&apos; for Component &apos;$saveComponentId&apos; deployed to &apos;1.Dev&apos; ($_file)&quot;
    	source &quot;${WD}&quot;/sendSlack.sh &quot;$_msg&quot;
    fi
else
	echo Sending Slack...
    _file=$GITHUB_REPO&quot;ViolationsReport_&quot;$saveComponentId&quot;.html&quot;
root@pn64:/var/lib/jenkins/jobs/Boomi/jobs/Create and Deploy Package (Dev)# 
root@pn64:/var/lib/jenkins/jobs/Boomi/jobs/Create and Deploy Package (Dev)# more config.xml 
<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create and Deploy Package</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>processId</name>
          <description>Process Id</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>packageVer</name>
          <description>Package Version</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>packageNotes</name>
          <description>Package Notes</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>componentType</name>
          <description>Type of Component</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>process</string>
              <string>api</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>xmlFolder</name>
          <description>Scan folder for Component definitions</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

export GITHUB_WORKSPACE=/opt/jenkins/boomi/
export WD=${GITHUB_WORKSPACE}/cli/scripts/
export WORKSPACE=$WD/tmp/
export GITHUB_REPO=&quot;https://github.com/p-hatz/boomi_CICD/blob/main/CodeReview/&quot;

export sonarRulesFile=&quot;$WD/conf/BoomiSonarRules.xml&quot;

export gitComponentRepoURL=&quot;https://github.com/p-hatz/boomi_CICD/&quot;
export gitComponentOption=&quot;CLONE&quot;

export AUTH=$AtomSphereUser:$AtomSphere
export componentId=$processId
export notes=$packageNotes
export componentType=$componentType
export extractComponentXmlFolder=$xmlFolder
export listenerStatus=&quot;PAUSED&quot;

export saveComponentId=$componentId
export saveComponentType=$componentType

export GH=$GH

source &quot;${WD}/initcrPackage.sh&quot; authToken=$AUTH componentId=$componentId packageVersion=$packageVer notes=&quot;$notes&quot; componentType=$componentType extractComponentXmlFolder=$extractComponentXmlFolder
_ret=$error
if [ &quot;$_ret&quot; -eq 0 ]
then
    envName=&quot;1.Dev&quot;
    echo Deploying...
	&quot;${WD}&quot;/initdeployPackage.sh authToken=$AUTH componentId=$saveComponentId packageVersion=$packageVer componentType=$saveComponentType notes=&quot;$notes&quot; env=$envName listenerStatus=$listenerStatus
	_ret=$?
	if [ &quot;$_ret&quot; -eq 0 ]
	then
		echo Sending Slack...
        _file=$GITHUB_REPO&quot;ViolationsReport_&quot;$saveComponentId&quot;.html&quot;
        _msg=&quot;Package &apos;$packageId&apos; for Component &apos;$saveComponentId&apos; deployed to &apos;1.Dev&apos; ($_file)&quot;
    	source &quot;${WD}&quot;/sendSlack.sh &quot;$_msg&quot;
    fi
else
	echo Sending Slack...
    _file=$GITHUB_REPO&quot;ViolationsReport_&quot;$saveComponentId&quot;.html&quot;
   _msg=&quot;Package &apos;$packageId&apos; for Component &apos;$saveComponentId&apos; failed to create. Check Violations Report ($_file)&quot;
    source &quot;${WD}&quot;/sendSlack.sh &quot;$_msg&quot;
fi</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@702.vfe613e537e88">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>AtomSphere</credentialsId>
          <variable>AtomSphere</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>AtomSphereUser</credentialsId>
          <variable>AtomSphereUser</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>GH</credentialsId>
          <variable>GH</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>
